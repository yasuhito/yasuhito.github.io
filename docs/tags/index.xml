<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Tags on Notes</title>
		<link>https://yasuhito.github.io/tags/</link>
		<description>Recent content in Tags </description>
		<generator>Hugo -- gohugo.io</generator>
		
  		<language>ja</language>
		
		<managingEditor>Page(/tags) (Yasuhito Takamiya)</managingEditor>
    	
		<atom:link href="/tags/" rel="self" type="application/rss+xml" />
		
		<item>
			<title>never</title>
			<link>https://yasuhito.github.io/post/20210318110047-never/</link>
			<pubDate>Thu, 18 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210318110047-never/</guid>
			<description>https://www.executeprogram.com/courses/typescript/lessons/never
関数の中には、決して戻らないものがあります。例えば、常に例外を発生させる関数は決して戻りません。
function throws() { throw new Error(&amp;#39;oh no&amp;#39;); } throws(); // 結果 // Error: oh no この関数の戻り値の型はどうすればよいでしょうか？ TypeScript は、この関数の戻り値の型を void と推測します。しかし、それでは何が起こっているのか完全には把握できていません。
void 型は、何らかの処理を行い終了するが、値を返さない関数のための型です。上の関数はこれとは異なり、この関数を呼び出しても、その後のコードは全く実行されません。
幸いなことに、TypeScript にはそのための型があります: never です。
function throws(): never { throw new Error(&amp;#39;oh no&amp;#39;); } throws(); // 結果 // Error: oh no never 型はちょっと不思議です。他のどの型にも割り当て可能です1。例えば、 number 型の変数に割り当てることができます。この関数は今まで通りに例外を投げますので、結果は上と同じです。
function throws(): never { throw new Error(&amp;#39;oh no&amp;#39;); } const n: number = throws(); // 結果 // Error: oh no 最初は、 never が any のように振る舞っているように見えます。なぜなら、 never を number （または string 、その他何でも）に割り当てることができるからです。しかし、 any と違って、これは安全です。</description>
		</item>
      	
		<item>
			<title>スカラー行列</title>
			<link>https://yasuhito.github.io/post/20210317113230-%E3%82%B9%E3%82%AB%E3%83%A9%E3%83%BC%E8%A1%8C%E5%88%97/</link>
			<pubDate>Wed, 17 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210317113230-%E3%82%B9%E3%82%AB%E3%83%A9%E3%83%BC%E8%A1%8C%E5%88%97/</guid>
			<description>単位行列の定数倍をスカラー行列という。
たとえば、
\[\begin{bmatrix} \lambda &amp;amp; 0 &amp;amp; 0 \\\
0 &amp;amp; \lambda &amp;amp; 0 \\\
0 &amp;amp; 0 &amp;amp; \lambda \end{bmatrix}\]
はスカラー行列である。</description>
		</item>
      	
		<item>
			<title>対角行列</title>
			<link>https://yasuhito.github.io/post/20210317101558-%E5%AF%BE%E8%A7%92%E8%A1%8C%E5%88%97/</link>
			<pubDate>Wed, 17 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210317101558-%E5%AF%BE%E8%A7%92%E8%A1%8C%E5%88%97/</guid>
			<description>\(n\) 次正方行列で、その対角線上にない成分がすべて \(0\) である行列のこと。
\[\begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 0 \\\
0 &amp;amp; 2 &amp;amp; 0 \\\
0 &amp;amp; 0 &amp;amp; -1 \end{bmatrix}\]
注意点として、行列の対角線は右下がりのもののみを言う。右上がりのものは対角線とは呼ばない。</description>
		</item>
      	
		<item>
			<title>正方行列</title>
			<link>https://yasuhito.github.io/post/20210317105154-%E6%AD%A3%E6%96%B9%E8%A1%8C%E5%88%97/</link>
			<pubDate>Wed, 17 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210317105154-%E6%AD%A3%E6%96%B9%E8%A1%8C%E5%88%97/</guid>
			<description>\(m \times m\) 行列は正方形状に成分が並ぶので \(m\) 次正方行列と呼ぶ。
\(2\) 次正方行列の例
\[\begin{bmatrix} 1 &amp;amp; 2 \\\
2 &amp;amp; -1 \end{bmatrix}\]
\(3\) 次正方行列の例
\[\begin{bmatrix} -1 &amp;amp; 2 &amp;amp; 3 \\\
1 &amp;amp; 1 &amp;amp; 0 \\\
2 &amp;amp; 0 &amp;amp; 1 \end{bmatrix}\]</description>
		</item>
      	
		<item>
			<title>ディラック記法</title>
			<link>https://yasuhito.github.io/post/20210311082809-%E3%83%86%E3%82%A3%E3%83%A9%E3%83%83%E3%82%AF%E8%A8%98%E6%B3%95/</link>
			<pubDate>Thu, 11 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210311082809-%E3%83%86%E3%82%A3%E3%83%A9%E3%83%83%E3%82%AF%E8%A8%98%E6%B3%95/</guid>
			<description>ディラック記法は、物理学者ポール・ディラックがとくに量子論を記述する目的で導入した記法。量子論のほとんどの教科書で今日でも使われている。
   名前 記号     ディラックのケット (ket) \(\vert{}\psi\rangle\)   ディラックのブラ (bra) \(\langle\pi\vert{}\)   ディラックのブラケット (braket) \(\langle\pi\vert{}\psi\rangle\)    Quantum Computation and Quantum Information によると、量子力学の難しさの原因はそれ自体が難しいというわけではなく、ディラック記法やそのほか物理学特有の記号がたくさんあることにあるようだ。
 量子力学の公理の理解を阻む主な要因は公理それ自体にあるのではなく、それを理解するのに必要な線形代数の表記法の多さにある。物理学者が量子力学に用いている見慣れない Dirac の表記法と相まって、それは (間違って) とても恐ろしい印象を与える。
    記号 意味     \(z^{\ast}\) 複素数 \(z\) の複素共役。\((1 + i)^{\ast} = 1 - i\)   \(\vert{}\psi\rangle\) ベクトル。ケット (ket) とも呼ばれる。   \(\langle\psi\vert{}\) \(\vert{}\psi\rangle\) に双対 (dual) なベクトル。ブラ (bra) とも呼ばれる   \(\langle\varphi\vert{}\psi\rangle\) \(\vert{}\varphi\rangle\) と \(\vert{}\psi\rangle\) の内積   \(\vert{}\varphi\rangle \otimes \vert{}\psi\rangle\) \(\vert{}\varphi\rangle\) と \(\vert{}\psi\rangle\) のテンソル積   \(\vert{}\varphi\rangle\vert{}\psi\rangle\) \(\vert{}\varphi\rangle\) と \(\vert{}\psi\rangle\) のテンソル積に対する簡略記号   \(A^{\ast}\) 行列 \(A\) の複素共役   \(A^T\) 行列 \(A\) の転置   \(A^{\dagger}\) 行列 \(A\) のエルミート共役、もしくは随伴。\(A^{\dagger} = (A^T)^{\ast}\)   \(\langle\varphi\vert{}A\vert{}\psi\rangle\) \(\vert{}\varphi\rangle\) と \(A\vert{}\psi\rangle\) の内積。\(A^{\dagger}\vert{}\varphi\rangle\) と \(\vert{}\psi\rangle\) の内積に等しい。    参考文献  P.</description>
		</item>
      	
		<item>
			<title>Org Mode</title>
			<link>https://yasuhito.github.io/post/20210223135036-org_mode/</link>
			<pubDate>Wed, 10 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210223135036-org_mode/</guid>
			<description>メモや論文など書くこと全般に使える Emacs のメジャーモード。Org-Roam を使うと、Roam Research 的なスマートノートを作ることができる。このノート上には Anki のカードも定義できるので、スマートノートと SRS をスムーズに組み合わせることができる。そのほか、文芸的プログラミングをサポートしているので、Emacs の設定ファイルを Org のドキュメントから生成できる。
Org mode for Emacs
Org のインライン記法  強調 **強調** 斜体 /斜体/ 下線 _下線_ 打ち消し +打ち消し+ verbatim =verbatim= inline code ~inline code~  </description>
		</item>
      	
		<item>
			<title>文芸的プログラミング</title>
			<link>https://yasuhito.github.io/post/20210310093010-%E6%96%87%E8%8A%B8%E7%9A%84%E3%83%95%E3%83%AD%E3%82%AF%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%AF/</link>
			<pubDate>Wed, 10 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210310093010-%E6%96%87%E8%8A%B8%E7%9A%84%E3%83%95%E3%83%AD%E3%82%AF%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%AF/</guid>
			<description>Donald E. Knuth が提唱したプログラミング手法の一つで、テキストファイル内にドキュメントとコードを埋めこみ、これから完全なドキュメントとコンパイル可能なソースコードを生成する方法。驚くことに TeX はこの方法で書かれていて、生成されたドキュメントは本として出版されている (TeX: The Program)。
TeX 以外に実用的なソフトウェアで文芸的プログラミングを採用した例は見当たらないが、最近では Org ファイルから Emacs や Bash などの設定ドキュメントとドットファイルを生成するという限定的な用途で文芸的プログラミングが使われている。
極端な例では、Org-Mode 内で論文を書く際に、本文だけでなくテーブルやグラフなど論文の構成要素をすべて生成するという Reproducible Research という手法もある。</description>
		</item>
      	
		<item>
			<title>How to Take Smart Notes</title>
			<link>https://yasuhito.github.io/post/20210228111127-how_to_take_smart_notes/</link>
			<pubDate>Wed, 03 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210228111127-how_to_take_smart_notes/</guid>
			<description> How to Take Smart Notes (Scribd) How to Take Smart Notes (Amazon)  </description>
		</item>
      	
		<item>
			<title>Powers of 10: Time Scales in User Experience</title>
			<link>https://yasuhito.github.io/post/20210303105204-powers_of_10_time_scales_in_user_experience/</link>
			<pubDate>Wed, 03 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210303105204-powers_of_10_time_scales_in_user_experience/</guid>
			<description>Powers of 10: Time Scales in User Experience</description>
		</item>
      	
		<item>
			<title>すべての知的努力はメモから</title>
			<link>https://yasuhito.github.io/post/20210303082924-%E3%81%99%E3%81%B8%E3%81%A6%E3%81%AE%E7%9F%A5%E7%9A%84%E5%8A%AA%E5%8A%9B%E3%81%AF%E3%83%A1%E3%83%A2%E3%81%8B%E3%82%89/</link>
			<pubDate>Wed, 03 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210303082924-%E3%81%99%E3%81%B8%E3%81%A6%E3%81%AE%E7%9F%A5%E7%9A%84%E5%8A%AA%E5%8A%9B%E3%81%AF%E3%83%A1%E3%83%A2%E3%81%8B%E3%82%89/</guid>
			<description>学習、勉強、研究、小説などあらゆる種類の知的活動や創作は、すべてメモを取ることから始まる。書くことについての話題となると、論文や小説といった「書きかけの作品」をいかに完成させるかという議論になりやすい。しかし、これらは「書く」という活動から見ればどれも例外的な瞬間にすぎない。書くことの大部分を占めるのは日常的なメモ書きであり、論文や小説などといった長い作品はメモを書く作業の積み重ねによって生まれる。
文章を書くプロセスは、真っ白な画面よりもはるかに早い段階から始まっていて、実際に議論を書き留めることは、全体のプロセスの中では最小の部分である。
参考文献  How to Take Smart Notes  </description>
		</item>
      	
	</channel>
</rss>
