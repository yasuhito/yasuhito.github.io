<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Tags on Notes</title>
		<link>https://yasuhito.github.io/tags/</link>
		<description>Recent content in Tags </description>
		<generator>Hugo -- gohugo.io</generator>
		
  		<language>ja</language>
		
		<managingEditor>Page(/tags) (Yasuhito Takamiya)</managingEditor>
    	
		<atom:link href="/tags/" rel="self" type="application/rss+xml" />
		
		<item>
			<title>anki-editor</title>
			<link>https://yasuhito.github.io/post/20210223202810-anki_editor/</link>
			<pubDate>Sat, 27 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210223202810-anki_editor/</guid>
			<description>Org Mode や Org-Roam で書いたノートから Anki カードを生成するためのパッケージ。 参考 louietan/anki-editor</description>
		</item>
      	
		<item>
			<title>Deft</title>
			<link>https://yasuhito.github.io/post/20210327120037-deft/</link>
			<pubDate>Sat, 27 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210327120037-deft/</guid>
			<description>https://github.com/jrblevin/deft Emacs を Notational Velocity 的に使うためのパッケージ。Org Mode や Org-Roam のノート一覧をファイル内容も含めてインクリメンタルサーチできるのが便利。ただし SKK が使えないの</description>
		</item>
      	
		<item>
			<title>Assoc</title>
			<link>https://yasuhito.github.io/post/20210323114201-assoc/</link>
			<pubDate>Tue, 23 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210323114201-assoc/</guid>
			<description>Assoc は Associativity (結合性) の略。図式的線形代数では足し算を扱うので、単に Assoc と書いた場合それは足し算の結合性を表す。 図式で足し算の結合性を表すと次のよう</description>
		</item>
      	
		<item>
			<title>Identity</title>
			<link>https://yasuhito.github.io/post/20210323094041-identity/</link>
			<pubDate>Tue, 23 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210323094041-identity/</guid>
			<description>図式的線形代数で一本の結線をアイデンティティ (identity) と呼ぶ。 入力は 1 つ、出力も同じく 1 つなので \((1, 1)\) である。 参考 Graphical Linear Algebra 5. Spoilers, Adding (Part 2) and Zero</description>
		</item>
      	
		<item>
			<title>Twist</title>
			<link>https://yasuhito.github.io/post/20210323095806-twist/</link>
			<pubDate>Tue, 23 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210323095806-twist/</guid>
			<description>図式的線形代数で交差する二本の結線をツイスト (twist) と呼ぶ。 入力は 2 つ、出力も同じく 2 つなので \((2, 2)\) である。</description>
		</item>
      	
		<item>
			<title>Unit</title>
			<link>https://yasuhito.github.io/post/20210323090747-unit/</link>
			<pubDate>Tue, 23 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210323090747-unit/</guid>
			<description>ゼロジェネレータ (Zero) の振舞いから、図式的線形代数における次の単位元 (identity element) 方程式に辿り着く。右辺は Identity。 なぜこうなるかは、次のようにワ</description>
		</item>
      	
		<item>
			<title>Zero</title>
			<link>https://yasuhito.github.io/post/20210323084442-zero/</link>
			<pubDate>Tue, 23 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210323084442-zero/</guid>
			<description>ゼロは加法の単位元。語源は、位取り筆算をヨーロッパに紹介したフィボナッチがゼロを zephryum と呼んだことに由来する。 ゼロを図式的線形代数で表すと、次の</description>
		</item>
      	
		<item>
			<title>図式の合成</title>
			<link>https://yasuhito.github.io/post/20210323110948-%E5%9B%B3%E5%BC%8F%E3%81%AE%E5%90%88%E6%88%90/</link>
			<pubDate>Tue, 23 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210323110948-%E5%9B%B3%E5%BC%8F%E3%81%AE%E5%90%88%E6%88%90/</guid>
			<description>図式の合成では、次のように第 1 引数の右に第 2 引数を置いて結線同士をつなげる: 合成のルールを式で書くと次の通り: 参考 Graphical Linear Algebra 5. Spoilers, Adding (Part 2) and Zero</description>
		</item>
      	
		<item>
			<title>図式の直和</title>
			<link>https://yasuhito.github.io/post/20210323102643-%E5%9B%B3%E5%BC%8F%E3%81%AE%E7%9B%B4%E5%92%8C/</link>
			<pubDate>Tue, 23 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210323102643-%E5%9B%B3%E5%BC%8F%E3%81%AE%E7%9B%B4%E5%92%8C/</guid>
			<description>図式の直和では、次のように第 1 引数を第 2 引数の上に重ねる: 直和のルールを式で書くと次の通り: 下の Identity を曲げているが、これは曲げても曲げなくても</description>
		</item>
      	
		<item>
			<title>Comm</title>
			<link>https://yasuhito.github.io/post/20210322140545-comm/</link>
			<pubDate>Mon, 22 Mar 2021 00:00:00 +0900</pubDate>
			<guid>https://yasuhito.github.io/post/20210322140545-comm/</guid>
			<description>Comm は Commutativity (可換性) の略。図式的線形代数では足し算を扱うので、単に Comm と書いた場合それは足し算の可換性を表す。 図式で足し算の可換性を表すと次のよう</description>
		</item>
      	
	</channel>
</rss>
