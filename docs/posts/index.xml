<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yasuhito&#39;s Zettel</title>
    <link>https://yasuhito.github.io/posts/</link>
    <description>Recent content in Posts on Yasuhito&#39;s Zettel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language><atom:link href="https://yasuhito.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo</title>
      <link>https://yasuhito.github.io/posts/20210228145035-hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210228145035-hugo/</guid>
      <description>Markdown で静的サイトを作るためのツール。Org-Mode の Hugo への exporter として Ox-Hugo があるので、Org-Roam で作った .org ファイルから自動的にサイトを作ることができる。
Hugo 公式サイト
テーマ テーマの設定ではまりたくないので、まずは最小限のテーマから始める
 https://github.com/leonstafford/accessible-minimalism-hugo-theme  TODOセットアップ DONEgithub のページに hugo で生成したサイトをデプロイ DONEページ間リンク ふつうに org-roam-insert したリンクが張られる模様
DONETeX の数式を表示 DONEfooter.html でテーマの html をコピーしているのを止める 最初から Mathjax をサポートしているテーマを探す
TODOHUGO_BASE_DIR と HUGO_SECTION を Org-Roam のテンプレートに入れる。 TODOバックリンクを html に入れる </description>
    </item>
    
    <item>
      <title>Org-Roam</title>
      <link>https://yasuhito.github.io/posts/20210223134834-org_roam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210223134834-org_roam/</guid>
      <description>Org-Roam は Org Mode の上に作られている。
TODOクラウドバックアップ beorg と同期するために iCloud を使う。iCloud はソフトウェアの追加インストールな しで iPhone や Mac と同期できるのも良い。
まずは ~/org に置いてある org 関連のファイルを iCloud の beorg ディレクトリに移 動しておいて、以下のように ~/org へシンボリックリンクを張るようにする。
cd ~ ln -s ~/Library/Mobile\ Documents/iCloud~com~appsonthemove~beorg/Documents/org org </description>
    </item>
    
    <item>
      <title>Ox-Hugo</title>
      <link>https://yasuhito.github.io/posts/20210301083537-ox_hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210301083537-ox_hugo/</guid>
      <description>Ox-Hugo (GitHub)</description>
    </item>
    
    <item>
      <title>状態ベクトル</title>
      <link>https://yasuhito.github.io/posts/20210224083510-%E7%8A%B6%E6%85%8B%E3%83%98%E3%82%AF%E3%83%88%E3%83%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210224083510-%E7%8A%B6%E6%85%8B%E3%83%98%E3%82%AF%E3%83%88%E3%83%AB/</guid>
      <description>量子コンピュータでは、情報を量子ビットとして表現する。量子ビットは、古典的なコンピュータでのビットに対応する。1つの量子ビットの任意の状態 \(|\psi\rangle\) は、ディラック記法を使って基底状態 \(|0\rangle\) と \(|1\rangle\) の重ね合わせ (線形結合) として次の式で表すことができる。
\[|\psi\rangle = \alpha|0\rangle + \beta|1\rangle\]
ここで係数 \(\alpha, \beta\) を確率振幅と呼び \(\alpha, \beta \in \mathbb{C}\) である。また、正規化条件として \(|\alpha|^2 + |\beta|^2 = 1\) に従わなければならない。
Anki Item Text \(|0\rangle\) は{{c1::ケット}}表記の一例です。
Item Front \(|0\rangle\) をベクトルで表すと?
Back \(|0\rangle = \begin{bmatrix} 1 \ 0 \end{bmatrix}\)
Item Front \(|1\rangle\) をベクトルで表すと?
Back \(|1\rangle = \begin{bmatrix} 0 \ 1 \end{bmatrix}\)
Item Front 一般的なケット形式で書くと、\(\begin{bmatrix}1 \ 0\end{bmatrix}\) 状態は何に対応するか?
Back \(|0\rangle\)
Item Front 一般的なケット形式で書くと、\(\begin{bmatrix}0 \ 1\end{bmatrix}\) 状態は何に対応するか?</description>
    </item>
    
    <item>
      <title>線形結合</title>
      <link>https://yasuhito.github.io/posts/20210223212225-%E7%B7%9A%E5%BD%A2%E7%B5%90%E5%90%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210223212225-%E7%B7%9A%E5%BD%A2%E7%B5%90%E5%90%88/</guid>
      <description>Anki Item Text ベクトル \(\boldsymbol{v}\), \(\boldsymbol{w}\) に数 \(c\), \(d\) を掛けて足した \(c\boldsymbol{v} + d\boldsymbol{w}\) を \(\boldsymbol{v}\) と \(\boldsymbol{w}\) の{{c1::線形結合}}と呼ぶ
Item Text ベクトル \(-\boldsymbol{v}\) と \(\boldsymbol{v}\) の和は{{c1::零ベクトル}}である</description>
    </item>
    
  </channel>
</rss>
