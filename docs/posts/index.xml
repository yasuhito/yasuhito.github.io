<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Notes</title>
    <link>https://yasuhito.github.io/posts/</link>
    <description>Recent content in Posts on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Yasuhito Takamiya</copyright>
    <lastBuildDate>Tue, 02 Mar 2021 00:00:00 +0900</lastBuildDate><atom:link href="https://yasuhito.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Andy Matuschak</title>
      <link>https://yasuhito.github.io/posts/20210302131638-andy_matuschak/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210302131638-andy_matuschak/</guid>
      <description>Andyʼs working notes</description>
    </item>
    
    <item>
      <title>API としてのタイトル</title>
      <link>https://yasuhito.github.io/posts/20210302115454-api_%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210302115454-api_%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB/</guid>
      <description>エバーグリーンノートのタイトル付けは API 設計によく似ている。
 単機能にする (例: Object#inspect) キャッチーな名詞にする (例: &amp;ldquo;囚人のジレンマ&amp;rdquo;、&amp;ldquo;割れ窓理論&amp;rdquo;) 一発で決まらない時は、時間とともに改善 (リファクタリング)  参考文献  Evergreen note titles are like APIs  </description>
    </item>
    
    <item>
      <title>Bret Victor</title>
      <link>https://yasuhito.github.io/posts/20210302122859-bret_victor/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210302122859-bret_victor/</guid>
      <description> 本人のサイト  </description>
    </item>
    
    <item>
      <title>アトミックな質問と答</title>
      <link>https://yasuhito.github.io/posts/20210302123555-%E3%82%A2%E3%83%88%E3%83%9F%E3%83%83%E3%82%AF%E3%81%AA%E8%B3%AA%E5%95%8F%E3%81%A8%E7%AD%94/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210302123555-%E3%82%A2%E3%83%88%E3%83%9F%E3%83%83%E3%82%AF%E3%81%AA%E8%B3%AA%E5%95%8F%E3%81%A8%E7%AD%94/</guid>
      <description>Anki のカードを作るときは、問題と答がたった一つの概念を表すようになるまで、つまりそれ以上分けられない単位 (=アトミック) まで分解する。
たとえば次の Anki カードがあった場合、
 問題: Unix でリンク名からファイル名へのソフトリンクを作るには? 答: ln -s ファイル名 リンク名  これは次の 2 つのカードに分割できる:
  問題: Unix ソフトリンクを作るための基本的コマンドとオプションは?
  答: ln -s
  問題: Unix ソフトリンクを作る時、リンク名とファイル名を指定する順番は?
  答: ファイル名 リンク名
  このようにすると、覚えやすくなり正解率も上がる。答も短くなるため、レビューがテンポ良く進むという利点もある。
もし間違えた場合でも、ミスをした箇所は明らかなため次からは間違えにくい。一方で、2 つ以上の要素が入ったアトミックでない問題で間違えた場合、ミスをした箇所がはっきりしないため、何度も間違えることが多い。
日常的に問題をアトミックに分割する癖を付けておくことは、学んだ事柄ひとつひとつを鋭く結晶化してくれる。手間はかかるが、それだけの価値はある。
注: アトミックな問題に分割した時、元のカードも取っておいたほうが良い。一つ上のレベルの問題として使える場合があるから。</description>
    </item>
    
    <item>
      <title>アトミック・タイトル</title>
      <link>https://yasuhito.github.io/posts/20210302115056-%E3%82%A2%E3%83%88%E3%83%9F%E3%83%83%E3%82%AF_%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210302115056-%E3%82%A2%E3%83%88%E3%83%9F%E3%83%83%E3%82%AF_%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB/</guid>
      <description>エバーグリーンノートのタイトルは、それ以上分割できない概念を名詞で表したもの (例: &amp;ldquo;囚人のジレンマ&amp;rdquo;、&amp;ldquo;割れ窓理論&amp;rdquo; etc.) にする。
これをアトミック・タイトルと呼ぶ。アトミック・タイトルはノート内からリンクを貼りやすく、覚えやすい。また一言で言えるので、複雑な概念を表す &amp;ldquo;ハンドル&amp;rdquo; として便利 (API としてのタイトル)。
タイトルがアトミック・タイトルかどうかは、少ない語の名詞になっているかどうかが良い判断基準になると思う。
参考文献  Evergreen notes should be atomic  </description>
    </item>
    
    <item>
      <title>ユニタリ行列</title>
      <link>https://yasuhito.github.io/posts/20210302120815-%E3%83%A6%E3%83%8B%E3%82%BF%E3%83%AA%E8%A1%8C%E5%88%97/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210302120815-%E3%83%A6%E3%83%8B%E3%82%BF%E3%83%AA%E8%A1%8C%E5%88%97/</guid>
      <description>ユニタリ行列は \(A^{\dagger} = A^{-1}\) を満たす行列 \(A\)
直交行列 \({}^tA = A^{-1}\) の複素数版。
参考文献  正規行列の対角化可能性  </description>
    </item>
    
    <item>
      <title>ライティング・インボックス</title>
      <link>https://yasuhito.github.io/posts/20210302145631-%E3%83%A9%E3%82%A4%E3%83%86%E3%82%A3%E3%83%B3%E3%82%AF_%E3%82%A4%E3%83%B3%E3%83%9B%E3%83%83%E3%82%AF%E3%82%B9/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210302145631-%E3%83%A9%E3%82%A4%E3%83%86%E3%82%A3%E3%83%B3%E3%82%AF_%E3%82%A4%E3%83%B3%E3%83%9B%E3%83%83%E3%82%AF%E3%82%B9/</guid>
      <description>保存版メモの作業場所としてライティング・インボックスを持っておく。一時的なメモや書きかけのメモは何でも、このインボックスにつっこむ。書きかけがすべてが入っているので、ライティング・インボックスは今までの洞察を蓄積した容れ物だと考えることができる。
このインボックスを漁ることで、次にとりかかるメモを決め、いつでも続きを書きはじめることができる。インボックスの中で保存版メモを仕上げ、アトミック・タイトルをつけ保存版メモとして保存する。つまらないメモはアーカイブする。
Org-Mode での実装 現在は、TODO アイテムに writing タグを付けることでライティング・インボックスを実装している。 練りあげてできあがった保存版メモは、Org-Roam の独立したノートを作ってそこに保存する。
参考文献  My morning writing practice by Andy Matuschak  </description>
    </item>
    
    <item>
      <title>ライブプログラミング</title>
      <link>https://yasuhito.github.io/posts/20210302122628-%E3%83%A9%E3%82%A4%E3%83%95%E3%83%95%E3%83%AD%E3%82%AF%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%AF/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210302122628-%E3%83%A9%E3%82%A4%E3%83%95%E3%83%95%E3%83%AD%E3%82%AF%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%AF/</guid>
      <description>ライブプログラミングとは、プログラムの実行時の情報を参照しながらコーディングできるようにするインタラクションデザインの一種。
従来の開発では、プログラマはソースコード (死んだ状態) を編集しながら実行時 (生きた状態) を頭の中でエミュレーションする必要があった。一方ライブプログラミングでは、開発環境が提示する生きたプログラムの状態を確認しながらソースコードを直感的に編集できる。
ライブプログラミング環境は、頭の中だけでは想像しにくい、抽象的な記号操作をメインとするシステムの理解や開発に有効である。Bret Victor らの Interactive Exploration of a Dynamic System では、微分方程式の初期値やパラメータを変えながら結果をインタラクティブに確認できる。量子コンピュータもそうした複雑なシステムの一種であり、直感的には理解しづらい量子プログラミングのためのライブプログラミング環境がいくつか提案されてきた。
このように、ライブプログラミングは具体的なモデリング、シミュレーション、可視化をベースにした新しい実践の形を提供する。</description>
    </item>
    
    <item>
      <title>保存版メモの数</title>
      <link>https://yasuhito.github.io/posts/20210302120102-%E4%BF%9D%E5%AD%98%E7%89%88%E3%83%A1%E3%83%A2%E3%81%AE%E6%95%B0/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210302120102-%E4%BF%9D%E5%AD%98%E7%89%88%E3%83%A1%E3%83%A2%E3%81%AE%E6%95%B0/</guid>
      <description>一日に書いた保存版メモの数&amp;quot; が、研究者の生産性指標として使える。たとえば、&amp;ldquo;一日あたり 2 個の保存版メモを書こう&amp;rdquo; という目標を立てれば、それに向かって努力することができる。
保存版メモを書かなければ、せっかくの読書のほとんどが無駄になってしまう。保存版メモを書くことは、読書に役立つだけでなくそれ自体が利益になる。たとえば、洞察力を育む、執筆そのものを加速する、など。つまり「書くことは考えること」。
自分はどのくらい一日に書いているだろうか? どのようにすれば計測できるだろうか?</description>
    </item>
    
    <item>
      <title>Ox-Hugo</title>
      <link>https://yasuhito.github.io/posts/20210301083537-ox_hugo/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210301083537-ox_hugo/</guid>
      <description>Org-Mode のファイルを Hugo 形式の Markdown に変換するためのプラグイン。
Org-Roam の保存版メモをまとめてエクスポート 次の関数を使って &amp;quot;permanent notes&amp;quot; とタグのついた Org-Roam の保存版ノートを Markdown に一括エクスポートできる。
#+begin_src elisp (after! (org org-roam) (defun my/org-roam-export-all () &amp;ldquo;Re-exports all Org-roam files to Hugo markdown.&amp;rdquo; (interactive) (dolist (f (org-roam&amp;ndash;list-all-files)) (with-current-buffer (find-file f) (when (s-contains? &amp;ldquo;permanent notes&amp;rdquo; (buffer-string)) (org-hugo-export-wim-to-md)))))) #+end_src elisp
参考文献  Ox-Hugo (GitHub)  </description>
    </item>
    
    <item>
      <title>対角化</title>
      <link>https://yasuhito.github.io/posts/20210301113146-%E5%AF%BE%E8%A7%92%E5%8C%96/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210301113146-%E5%AF%BE%E8%A7%92%E5%8C%96/</guid>
      <description>ある行列 \(A\) を正則行列 \(P\) によって相似変換して結果を対角行列にすること。 あるいは、そのような行列 \(P\) を見つけること
\[P^{-1}AP = \begin{bmatrix} a^{\prime}_{11} &amp;amp; 0 &amp;amp; 0 &amp;amp; \ldots &amp;amp; 0 \\\
0 &amp;amp; a^{\prime}_{22} &amp;amp; 0 &amp;amp; \ldots &amp;amp; 0 \\\
0 &amp;amp; 0 &amp;amp; \ddots &amp;amp; &amp;amp; 0 \\\
\vdots &amp;amp; \vdots &amp;amp; &amp;amp; \ddots &amp;amp; 0 \\\
0 &amp;amp; 0 &amp;amp; \ldots &amp;amp; 0 &amp;amp; a^{\prime}_{nn} \end{bmatrix}\]</description>
    </item>
    
    <item>
      <title>正則行列</title>
      <link>https://yasuhito.github.io/posts/20210301112911-%E6%AD%A3%E5%89%87%E8%A1%8C%E5%88%97/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210301112911-%E6%AD%A3%E5%89%87%E8%A1%8C%E5%88%97/</guid>
      <description>\(n\) 次正方行列 \(A\) について、
\[AB = BA = I\]
となる \(n\) 次正方行列 \(B\) が存在するとき、\(A\) は正方行列という。</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://yasuhito.github.io/posts/20210228145035-hugo/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210228145035-hugo/</guid>
      <description>Markdown で静的サイトを作るためのツール。Ox-Hugo を使って、Org-Roam の .org ファイルから自動的に yasuhito.github.io を生成する。
Hugo 公式サイト
.org ファイルの設定 .org ファイルの冒頭で #+SETUPFILE: setup.org を指定し setup.org には次の Hugo 共通設定を入れておく。
#+HUGO_BASE_DIR: ~/Documents/Zettel #+HUGO_SECTION: ./posts/ テーマ Mathjax が始めから入っている cactus をとりあえず使っている。
 https://github.com/monkeyWzr/hugo-theme-cactus  </description>
    </item>
    
    <item>
      <title>TOEIC L &amp; R TEST 出る単特急 金のフレーズ</title>
      <link>https://yasuhito.github.io/posts/20210228110804-toeic_l_r_test_%E5%87%BA%E3%82%8B%E5%8D%98%E7%89%B9%E6%80%A5_%E9%87%91%E3%81%AE%E3%83%95%E3%83%AC%E3%83%BC%E3%82%B9/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210228110804-toeic_l_r_test_%E5%87%BA%E3%82%8B%E5%8D%98%E7%89%B9%E6%80%A5_%E9%87%91%E3%81%AE%E3%83%95%E3%83%AC%E3%83%BC%E3%82%B9/</guid>
      <description>Amazon
Anki カード作りの研究用に買ってみた。</description>
    </item>
    
    <item>
      <title>基底状態</title>
      <link>https://yasuhito.github.io/posts/20210224084353-%E5%9F%BA%E5%BA%95%E7%8A%B6%E6%85%8B/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210224084353-%E5%9F%BA%E5%BA%95%E7%8A%B6%E6%85%8B/</guid>
      <description>\(|0\rangle\) と \(|1\rangle\) は基底状態と呼ばれ、古典コンピュータのビット 0 と 1 に対応する。数学的には、基底状態は状態ベクトル \(|\psi\rangle\) の正規直交基底を形成するベクトルであり、それぞれ次の列ベクトルで定義される。
\[|0\rangle := \begin{bmatrix} 1 \ 0 \end{bmatrix}, |1\rangle := \begin{bmatrix} 0 \ 1 \end{bmatrix}\]
よって 1 量子ビットの状態 \(|\psi\rangle\) は、2次元複素ベクトル空間の単位ベクトルとして表現できる。
\[|\psi\rangle = \begin{bmatrix} \alpha \ \beta \end{bmatrix}\]</description>
    </item>
    
    <item>
      <title>状態ベクトル</title>
      <link>https://yasuhito.github.io/posts/20210224083510-%E7%8A%B6%E6%85%8B%E3%83%98%E3%82%AF%E3%83%88%E3%83%AB/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210224083510-%E7%8A%B6%E6%85%8B%E3%83%98%E3%82%AF%E3%83%88%E3%83%AB/</guid>
      <description>量子コンピュータでは、情報を量子ビットとして表現する。量子ビットは、古典的なコンピュータでのビットに対応する。1つの量子ビットの任意の状態 \(|\psi\rangle\) は、ディラック記法を使って基底状態 \(|0\rangle\) と \(|1\rangle\) の重ね合わせ (線形結合) として次の式で表すことができる。
\[|\psi\rangle = \alpha|0\rangle + \beta|1\rangle\]
ここで係数 \(\alpha, \beta\) を確率振幅と呼び \(\alpha, \beta \in \mathbb{C}\) である。また、正規化条件として \(|\alpha|^2 + |\beta|^2 = 1\) に従わなければならない。</description>
    </item>
    
    <item>
      <title>HTML Over the Wire</title>
      <link>https://yasuhito.github.io/posts/20210223123752-html_over_the_wire/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210223123752-html_over_the_wire/</guid>
      <description>React や Vue.js などの Web プログラミングフレームワークでは、ネイティブアプリと同様の UX を提供するために処理の大半をブラウザ側で行う。サーバは HTML ではなくデータを JSON として返す API/GraphQL サーバーとして動作し、HTML の生成はクライアントサイドのブラウザで動作する JavaScript フレームワーク上で行う。
これは、従来の Rails などのフレームワークと比較して複雑である。従来は、サーバ側で MVC フレームワークが動作し、データとプレゼンテーションを HTML としてサーバ側で生成し、ブラウザへ送っていた。一方で、近年の Web フレームワークはブラウザ上で MVC フレームワークが動作する。画面遷移を高速にするために、DOM ツリーの差分を取り、仮想 DOM という仕組みで最小の書き換えで画面遷移を実現する。
しかし、従来の単純なフレームワークでもネイティブアプリと同等の UX を達成することは可能である。DOM のうち動的な部分のみ JavaScript で書き換える。画面遷移についても、マウスオーバー時のプリフェッチによってソースコードを変更せずに高速化が可能である。
このための代表的なフレームワークが HOTwire。元々 Turbolinks や Stimulus.js だったものをまとめたもの。HTML の data 属性を使うことで、JavaScript 部分と HTML を結合することができる。JavaScript 部分は、サーバ側の MVC 実装や HTML にほとんど染み出さない。
参考文献  HTML over the wire  </description>
    </item>
    
    <item>
      <title>Org-Roam</title>
      <link>https://yasuhito.github.io/posts/20210223134834-org_roam/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210223134834-org_roam/</guid>
      <description>Org-Roam は Org Mode の上に構築された、Roam Research ライクなノート環境。
クラウドへのバックアップ iCloud で同期すれば、ソフトウェアの追加インストールなしで iPhone や Mac と org ファイルを同期できる。とにかく手軽なので、なにか問題が出るまではしばらく iCloud でバックアップを取ることにする。
iCloud に org ディレクトリを作るには、iPhone に beorg をインストールするのが手っ取り早い。インストールすると iCloud Drive 上に beorg 用のディレクトリが作られるので、ここから ~/org にシンボリックリンクを張る。
cd ~ ln -s ~/Library/Mobile\ Documents/iCloud~com~appsonthemove~beorg/Documents/org org </description>
    </item>
    
    <item>
      <title>線形結合</title>
      <link>https://yasuhito.github.io/posts/20210223212225-%E7%B7%9A%E5%BD%A2%E7%B5%90%E5%90%88/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0900</pubDate>
      
      <guid>https://yasuhito.github.io/posts/20210223212225-%E7%B7%9A%E5%BD%A2%E7%B5%90%E5%90%88/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
